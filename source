#include <LWiFi.h>
#include <WiFiClient.h>
#include "MCS.h"
#include "DHT.h"
#include "LTimer.h"

// Assign AP ssid / password here
#define _SSID "FAQ"
#define _KEY  "23221317"

#define DHTTYPE DHT11
#define DHTPIN 7
DHT dht(DHTPIN, DHTTYPE);
LTimer timer0(LTIMER_0);
float h,t;


// Assign device id / key of your test device
MCSDevice mcs("DzODFhtF", "y8Kx2npdLT6z0T3Z");

// Assign channel id 
// The test device should have 2 channel
// the first channel should be "Controller" - "On/Off"
// the secord channel should be "Display" - "On/Off"

MCSDisplayFloat ch1("ch1");
MCSDisplayInteger ch2("ch2");

void _callback0(void *usr_data)
{ 
  
  if (isnan(h) || isnan(t) ) {
    Serial.println(F("Failed to read from DHT sensor!"));
    return;
  }
  
  Serial.print(F("Humidity: "));
  Serial.print(h);
  Serial.print(F("%  Temperature: "));
  Serial.print(t);
  Serial.println(F("C "));
}
void setup() {
  // setup Serial output at 9600
  Serial.begin(9600);

  // setup Wifi connection
  while(WL_CONNECTED != WiFi.status())
  {
    Serial.print("WiFi.begin(");
    Serial.print(_SSID);
    Serial.print(",");
    Serial.print(_KEY);
    Serial.println(")...");
    WiFi.begin(_SSID, _KEY);
  }
  Serial.println("WiFi connected !!");

  // setup MCS connection
  mcs.addChannel(ch1);
  mcs.addChannel(ch2);
  while(!mcs.connected())
  {
    Serial.println("MCS.connect()...");
    mcs.connect();
  }
  Serial.println("MCS connected !!");

  
  timer0.begin();
  timer0.start(2000, LTIMER_REPEAT_MODE, _callback0, NULL);
  dht.begin();
}

void loop() {
  // call process() to allow background processing, add timeout to avoid high cpu usage
  Serial.print("process(");
  Serial.print(millis());
  Serial.println(")");
  mcs.process(100);
  
  // updated flag will be cleared in process(), user must check it after process() call.
  h = dht.readHumidity();
  t = dht.readTemperature();
  ch1.set(h);
  ch2.set(t); 
  // check if need to re-connect
  while(!mcs.connected())
  {
    Serial.println("re-connect to MCS...");
    mcs.connect();
    if(mcs.connected())
      Serial.println("MCS connected !!");
  }
}
